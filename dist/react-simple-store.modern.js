import{useState as t,useEffect as e}from"react";function r(){return r=Object.assign?Object.assign.bind():function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},r.apply(this,arguments)}const n=(n,o={},s={})=>{let c=!1,i=r({},o);const a=new Set,{allowNested:l=!0}=s,b=(t,e)=>{if(!l&&c)throw new Error("Nested state mutation disabled");try{c=!0;const n="function"==typeof t?t(i):t;if(!Object.is(n,i)){if("object"!=typeof n)throw new Error("next state not object");const t=i;i=e?n:r({},i,n),a.forEach(e=>e(i,t))}}finally{c=!1}},f=()=>i,u=t=>(a.add(t),()=>{a.delete(t)}),d=(t,e,r)=>{let n=t(i);return u(()=>{const o=t(i);(r?r(n,o):Object.is(n,o))||(e(o,n),n=o)})},p=(...t)=>t[1]?d(...t):u(t[0]);return r({},n(b,f,{subscribe:p}),{useStore:(r,n,o)=>{const[s,c]=t(r(i));return e(()=>d(r,c,n),[(null==o?void 0:o.rebind)&&r]),s},getState:f,setState:b,destroy:()=>a.clear(),subscribe:p})},o=(t,e)=>n((e,r)=>({dispatch:n=>(e(t(r(),n)),n)}),e);export{n as createStore,o as createStoreRedux};
